/**
 * Copyright 2017 Confluent Inc.
 **/
package io.confluent.kql.rest;

import com.github.rvesse.airline.HelpOption;
import com.github.rvesse.airline.SingleCommand;
import com.github.rvesse.airline.annotations.Command;
import com.github.rvesse.airline.annotations.Option;
import com.github.rvesse.airline.annotations.restrictions.Required;
import com.github.rvesse.airline.help.Help;
import com.github.rvesse.airline.parser.errors.ParseException;

import javax.inject.Inject;
import java.io.IOException;

@Command(name = "KQL-Server", description = "KQL Not-A-Cluster")
public class CLIOptions {

  private static final String PROPERTIES_FILE_OPTION_NAME = "--properties-file";
  private static final String QUICKSTART_OPTION_NAME = "--quickstart-file";

  // Only here so that the help message generated by Help.help() is accurate
  @Inject
  public HelpOption help;

  // Uncomment if you ever want to take in non-flag arguments
//  @Arguments
//  public ArrayList<String> arguments;
//  public List<String> getArguments() {
//    return arguments;
//  }

  @Required
  @Option(
      name = PROPERTIES_FILE_OPTION_NAME,
      description = "A file specifying properties for the KQL Server, KQL, and its underlying Kafka Streams instance(s)"
  )
  private String propertiesFile;
  public String getPropertiesFile() {
    return propertiesFile;
  }

  @Option(
      name = QUICKSTART_OPTION_NAME,
      description = "An optional static HTML file to serve at the /quickstart resource"
  )
  private String quickstart;
  public String getQuickstart() {
    return quickstart;
  }

  public static CLIOptions parse(String[] args) throws IOException {

    SingleCommand<CLIOptions> optionsParser = SingleCommand.singleCommand(CLIOptions.class);

    // If just a help flag is given, an exception will be thrown due to missing required options; hence, this workaround
    for (String arg : args) {
      if ("--help".equals(arg) || "-h".equals(arg)) {
        Help.help(optionsParser.getCommandMetadata());
        return null;
      }
    }

    try {
      return optionsParser.parse(args);
    } catch (ParseException exception) {
      if (exception.getMessage() != null) {
        System.err.println(exception.getMessage());
      } else {
        System.err.println("Options parsing failed for an unknown reason");
      }
      System.err.println("See the -h or --help flags for usage information");
      return null;
    }
  }
}
